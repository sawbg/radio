.TH "src/mic_test.cpp" 3 "Wed Apr 13 2016" "An Inexpensive, Software-Defined IF Modulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/mic_test.cpp \- 
.PP
Tests getting mic input via ALSA  May not even compile at the moment\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <cmath>\fP
.br
\fC#include <climits>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <alsa/asoundlib\&.h>\fP
.br
\fC#include 'definitions\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Tests getting mic input via ALSA  May not even compile at the moment\&. 


.PP
\fBAuthor:\fP
.RS 4
Samuel Andrew Wisner, awisner94@gmail.com 
.RE
.PP

.PP
Definition in file \fBmic_test\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "int main ()"
This program tests taking information from the microphone via the ALSA API\&. Not sure if it works\&. 
.PP
Definition at line 21 of file mic_test\&.cpp\&.
.PP
.nf
21            {
22     int ret;
23 
24     snd_pcm_t* pcm_handle;  // device handle
25 //  snd_pcm_stream_t stream = SND_PCM_STREAM_PLAYBACK;
26     snd_pcm_stream_t stream = SND_PCM_STREAM_CAPTURE;
27     snd_pcm_hw_params_t* hwparams;  // hardware information
28     char* pcm_name = strdup("plughw:1,0");  // on-board audio jack
29     //char* pcm_name = strdup("plughw:0,0");  // on-board audio jack
30     int rate = 48000;
31 
32     const uint16 freq = 440;
33     long unsigned int bufferSize = 8192*4;
34     const uint32 len = bufferSize*100;
35     const float32 arg = 2 * 3\&.141592 * freq / rate;
36     sint16 vals[len];
37 
38     float test;
39     float last = 0;
40     long unsigned int count = 0;
41     int count2 = 0;
42 
43     for(int i = 0; i < len; i = i + 2) {
44         bool lastWas = abs(sin(last)) < 0\&.01;
45 
46         last += arg;
47         if(last > 2 * M_PI) last -= 2 * M_PI;
48 
49         test = 32000 * sin(last);
50 
51         if(abs(sin(last)) < 0\&.01 && lastWas) count++;
52 
53         vals[i] = (sint16)(test + 0\&.5);
54         vals[i+1] = vals[i];
55     }
56 
57     cout << "COUNT: " << count << endl;
58     snd_pcm_hw_params_alloca(&hwparams);
59 
60     ret = snd_pcm_open(&pcm_handle, pcm_name, stream, 0);
61     cout << "Opening: " << snd_strerror(ret) << endl;
62 
63     ret = snd_pcm_hw_params_any(pcm_handle, hwparams);
64     cout << "Initializing hwparams structure: " << snd_strerror(ret) << endl;   
65 
66     ret = snd_pcm_hw_params_set_access(pcm_handle, hwparams,
67             SND_PCM_ACCESS_RW_INTERLEAVED);
68     cout << "Setting access: " << snd_strerror(ret) << endl;
69 
70     ret = snd_pcm_hw_params_set_format(pcm_handle, hwparams,
71             SND_PCM_FORMAT_S16_LE);
72     cout << "Setting format: " << snd_strerror(ret) << endl;
73 
74     ret = snd_pcm_hw_params_set_rate(pcm_handle, hwparams,
75             rate, (int)0);
76     cout << "Setting rate: " << snd_strerror(ret) << endl;
77 
78     ret = snd_pcm_hw_params_set_channels(pcm_handle, hwparams, 2); 
79     cout << "Setting channels: " << snd_strerror(ret) << endl;
80 
81     ret = snd_pcm_hw_params_set_periods(pcm_handle, hwparams, 2, 0);
82     cout << "Setting periods: " << snd_strerror(ret) << endl;
83 
84     ret = snd_pcm_hw_params_set_buffer_size_near(pcm_handle, hwparams,
85             &bufferSize);
86     cout << "Setting buffer size: " << snd_strerror(ret) << endl;
87 
88     ret = snd_pcm_hw_params(pcm_handle, hwparams);
89     cout << "Applying parameters: " << snd_strerror(ret) << endl;
90 
91 /*  ret = snd_pcm_hw_params_get_period_size(hwparams, &count, &count2);
92     cout << "Actual period size: " << count << endl;
93     cout << "Returned: " << snd_strerror(ret) << endl;*/
94 
95     
96 
97     cout << endl << endl;
98 
99 
100     //const void* ptr = (const void*)&vals;
101     void* ptr = (void*)&vals;
102     int err;
103 
104     for(int i = 0; i < 100; i++) {
105         do {
106             ret = snd_pcm_readi(pcm_handle,
107                     ptr, bufferSize);
108 
109             if(ret < 0) {
110                 err = snd_pcm_prepare(pcm_handle);
111                 cout << "Preparing: " << snd_strerror(err)
112                     << endl;
113             }
114         } while(ret < 0);
115 
116         cout << "Writing data: " << ret << endl;
117     }
118 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for An Inexpensive, Software-Defined IF Modulator from the source code\&.
