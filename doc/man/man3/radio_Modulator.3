.TH "radio::Modulator" 3 "Wed Apr 13 2016" "An Inexpensive, Software-Defined IF Modulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
radio::Modulator \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Modulator\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBModulator\fP (\fBfloat32\fP data[], \fBuint32\fP size, \fBModulationType\fP type, \fBfloat32\fP freqInter=\fBFREQ_INTERMEDIATE\fP, \fBuint32\fP rate=\fBSAMPLING_RATE\fP)"
.br
.ti -1c
.RI "\fB~Modulator\fP ()"
.br
.ti -1c
.RI "void \fBMod\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class implements various types of modulation\&. 
.PP
Definition at line 37 of file Modulator\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "radio::Modulator::Modulator (\fBfloat32\fPdata[], \fBuint32\fPsize, \fBModulationType\fPtype, \fBfloat32\fPfreqInter = \fC\fBFREQ_INTERMEDIATE\fP\fP, \fBuint32\fPrate = \fC\fBSAMPLING_RATE\fP\fP)"
Creates a \fBModulator\fP with the specified parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIfreqInter\fP the frequency of the IF carrier sinusoid
.br
\fIrate\fP the sampling rate of the baseband and IF signals
.br
\fIdata\fP the array holding initially the baseband signal
.br
\fIsize\fP the number of elements in the data array
.br
\fItype\fP form of modulation to use 
.RE
.PP

.PP
Definition at line 100 of file Modulator\&.hpp\&.
.SS "radio::Modulator::~Modulator ()"
Frees the memory needed for the Hilbert transform\&. 
.PP
Definition at line 114 of file Modulator\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void radio::Modulator::Mod ()"
Modulates the audio currently in the data array\&. 
.PP
Definition at line 118 of file Modulator\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for An Inexpensive, Software-Defined IF Modulator from the source code\&.
