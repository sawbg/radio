.TH "radio::Gain" 3 "Wed Apr 13 2016" "An Inexpensive, Software-Defined IF Modulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
radio::Gain \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Gain\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGain\fP (\fBfloat32\fP *data, \fBuint32\fP size, \fBfloat32\fP gaindB)"
.br
.ti -1c
.RI "void \fBApply\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Applies a gain to a (baseband) signal\&. 
.PP
Definition at line 18 of file Gain\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "radio::Gain::Gain (\fBfloat32\fP *data, \fBuint32\fPsize, \fBfloat32\fPgaindB)"
Initializes a \fBGain\fP object and converts gain from decibels to a standard value\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP the signal to which the gain is applied
.br
\fIsize\fP the number of elements in the data array
.br
\fIgaindB\fP the desired gain in decibels (of power) 
.RE
.PP

.PP
Definition at line 61 of file Gain\&.hpp\&.
.PP
.nf
61                                                          {
62         this->data = data;
63         this->size = size;
64         gainCoeff = pow(10, gaindB / 20);
65     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void radio::Gain::Apply ()"
Applies the gain to the signal contained in the data array 
.PP
Definition at line 67 of file Gain\&.hpp\&.
.PP
.nf
67                      {
68         for(uint32 i = 0; i < size; i++) {
69             data[i] *= gainCoeff;
70 
71             if((data[i] > 1 || data[i] < -1) && !hasClipped) {
72                 hasClipped = true;
73                 std::cerr << "Baseband clipping has occurred!"
74                     << std::endl;
75             }
76         }
77     }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for An Inexpensive, Software-Defined IF Modulator from the source code\&.
