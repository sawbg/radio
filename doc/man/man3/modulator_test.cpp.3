.TH "src/modulator_test.cpp" 3 "Wed Apr 13 2016" "An Inexpensive, Software-Defined IF Modulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/modulator_test.cpp \- 
.PP
contains a test program to test the Modulator class  

.SH SYNOPSIS
.br
.PP
\fC#include <cstdio>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include 'auxiliary\&.hpp'\fP
.br
\fC#include 'Modulator\&.hpp'\fP
.br
\fC#include 'PlTone\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Detailed Description"
.PP 
contains a test program to test the Modulator class 


.PP
\fBAuthor:\fP
.RS 4
Samuel Andrew Wisner, awisner94@gmail.com 
.RE
.PP
\fBBug\fP
.RS 4
filtered SSB clicking 
.RE
.PP

.PP
Definition in file \fBmodulator_test\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "int main (intargc, char *argv[])"
Program to test the Modulator class with a self-generated sinusoidal input\&. 
.PP
Definition at line 24 of file modulator_test\&.cpp\&.
.PP
.nf
24                                  {
25 
26     // Constants
27     const uint16 BUFFER_SIZE = 16384;
28 
29     // Declare primative Variables
30     float32 dataBuffer[BUFFER_SIZE];
31     float32 iqBuffer[2 * BUFFER_SIZE];
32     ModulationType type;
33     float32 freq = atof(argv[2]);
34     float32 tone = 0;
35 
36     if(argc >= 4) tone = atof(argv[3]);
37 
38     try{
39         type = to_type(string(argv[1]));
40     } catch(std::exception ex) {
41         std::cerr << ex\&.what() << std::endl << std::endl;
42         return ERROR;
43     }
44 
45     if(freq < 0) {
46         cerr << "The given tone was invalid\&." << endl;
47         return ERROR;
48     }
49 
50     // Declare objects
51     Modulator modulator(dataBuffer, BUFFER_SIZE, type, 20000);
52     Sinusoid sinusoid(freq);
53     PlTone(tone > 0 ? 0\&.15 : 0, dataBuffer, BUFFER_SIZE, tone, 48000);
54 
55     while(true) {
56         for(uint16 i = 0; i < BUFFER_SIZE; i++) {
57             dataBuffer[i] = sinusoid\&.next();
58         }
59 
60         modulator\&.Mod();
61         makeIQ(dataBuffer, iqBuffer, BUFFER_SIZE);
62         to_sint32(iqBuffer, 2 * BUFFER_SIZE);
63         write(STDOUT_FILENO, &iqBuffer,  2 * BUFFER_SIZE * sizeof(sint32));
64     }
65 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for An Inexpensive, Software-Defined IF Modulator from the source code\&.
